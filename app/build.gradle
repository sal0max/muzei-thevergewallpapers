apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

dependencies {
   // kotlin
   implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
   implementation 'androidx.core:core-ktx:1.3.1'
   // muzei
   implementation 'com.google.android.apps.muzei:muzei-api:3.4.0'
   // retrofit
   implementation 'com.squareup.retrofit2:retrofit:2.6.2'
   implementation 'com.squareup.okhttp3:logging-interceptor:4.2.2'
   implementation 'org.jsoup:jsoup:1.13.1'
   // misc
   implementation 'android.arch.work:work-runtime-ktx:1.0.1'
   implementation 'androidx.preference:preference-ktx:1.1.1'
   // test
   testImplementation 'junit:junit:4.12'
}

android {
   compileSdkVersion 30
   compileOptions {
      sourceCompatibility JavaVersion.VERSION_1_8
      targetCompatibility JavaVersion.VERSION_1_8
   }
   kotlinOptions {
      jvmTarget = JavaVersion.VERSION_1_8
   }

   defaultConfig {
      applicationId 'de.salomax.muzei.thevergewallpapers'
      minSdkVersion 21
      targetSdkVersion 30
      // SemVer
      def major = 1
      def minor = 0
      def patch = 1
      versionCode = (major * 10000) + (minor * 100) + patch
      versionName = "$major ($major.$minor.$patch)"
      //
      vectorDrawables.useSupportLibrary = true
   }

   signingConfigs {
      release {
         storeFile     file(getSecret('KEYSTORE_FILE'))
         storePassword getSecret('KEYSTORE_PASSWORD')
         keyAlias      getSecret('KEYSTORE_KEY_ALIAS')
         keyPassword   getSecret('KEYSTORE_KEY_PASSWORD')
      }
   }

   buildTypes {
      release {
         signingConfig signingConfigs.release
         debuggable false
         minifyEnabled true
         zipAlignEnabled true
         jniDebuggable false
         proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      }
      debug {
         applicationIdSuffix '.debug'
         versionNameSuffix ' [DEBUG]'
      }
   }

   lintOptions {
      disable 'InvalidPackage', 'AllowBackup'
   }

   android {
      sourceSets {
         main.java.srcDirs += 'src/main/kotlin'
         test.java.srcDirs += 'src/test/kotlin'
      }
   }

}

tasks.withType(Test) {
   testLogging {
      events "started", "passed", "skipped", "failed"
   }
}

def getSecret(String key) {
   def secretsFile = rootProject.file('secrets.properties')
   if (secretsFile.exists()) {
      Properties props = new Properties()
      props.load(new FileInputStream(secretsFile))
      return props[key]
   } else {
      return null
   }
}
