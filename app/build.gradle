apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

dependencies {
   // kotlin
   implementation 'androidx.core:core-ktx:1.7.0'
   // muzei
   implementation 'com.google.android.apps.muzei:muzei-api:3.4.1'
   // retrofit
   implementation 'com.squareup.retrofit2:retrofit:2.9.0'
   implementation 'com.squareup.okhttp3:logging-interceptor:4.9.3'
   implementation 'org.jsoup:jsoup:1.14.3'
   // misc
   implementation 'androidx.work:work-runtime-ktx:2.7.1'
   implementation 'androidx.preference:preference-ktx:1.2.0'
   // test
   testImplementation 'junit:junit:4.13.2'
}

android {
   compileSdkVersion 32
   buildToolsVersion '30.0.3'

   compileOptions {
      sourceCompatibility JavaVersion.VERSION_1_8
      targetCompatibility JavaVersion.VERSION_1_8
   }
   kotlinOptions {
      jvmTarget = JavaVersion.VERSION_1_8
   }

   defaultConfig {
      applicationId 'de.salomax.muzei.thevergewallpapers'
      minSdkVersion 21
      targetSdkVersion 32
      // SemVer
      versionName = "1.0.3"
      versionCode = 10003
      archivesBaseName = "$applicationId-v$versionCode"
      //
      vectorDrawables.useSupportLibrary = true
   }

   signingConfigs {
      release {
         storeFile     file(getSecret('KEYSTORE_FILE'))
         storePassword getSecret('KEYSTORE_PASSWORD')
         keyAlias      getSecret('KEYSTORE_KEY_ALIAS')
         keyPassword   getSecret('KEYSTORE_KEY_PASSWORD')
      }
   }

   buildTypes {
      release {
         signingConfig signingConfigs.release
         debuggable false
         jniDebuggable false
         minifyEnabled true
         shrinkResources true
         zipAlignEnabled true
         proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      }
      debug {
         applicationIdSuffix '.debug'
         versionNameSuffix ' [DEBUG]'
      }
   }

   lintOptions {
      disable 'InvalidPackage', 'AllowBackup'
   }

   android {
      sourceSets {
         main.java.srcDirs += 'src/main/kotlin'
         test.java.srcDirs += 'src/test/kotlin'
      }
   }

}

tasks.withType(Test) {
   testLogging {
      events "started", "passed", "skipped", "failed"
   }
}

def getSecret(String key) {
   def secretsFile = rootProject.file('secrets.properties')
   if (secretsFile.exists()) {
      Properties props = new Properties()
      props.load(new FileInputStream(secretsFile))
      return props[key]
   } else {
      return null
   }
}

// versionCode <-> versionName /////////////////////////////////////////////////////////////////////

/**
 * Checks if versionCode and versionName match.
 * Needed because of F-Droid: both have to be hard-coded and can't be assigned dynamically.
 * So at least check during build for them to match.
 */
task checkVersion doLast {
   int versionCode = android.defaultConfig.versionCode
   int correctVersionCode = generateVersionCode(android.defaultConfig.versionName)
   if (versionCode != correctVersionCode)
      throw new GradleException(
            "versionCode and versionName don't match: " +
                  "versionCode should be $correctVersionCode. Is $versionCode."
      )
}
assemble.dependsOn checkVersion

/**
 * Checks if a fastlane changelog for the current version is present.
 */
task checkFastlaneChangelog doLast {
   int versionCode = android.defaultConfig.versionCode
   File changelogFile = file("$rootDir/fastlane/metadata/android/en-US/changelogs/${versionCode}.txt")
   if (!changelogFile.exists())
      throw new GradleException(
            "Fastlane changelog missing: expecting file '$changelogFile'"
      )
}
build.dependsOn checkFastlaneChangelog

/**
 * Generates a versionCode based on the given semVer String.
 * See e.g. https://proandroiddev.com/keep-salinity-with-your-versioncode-db2089b640b9
 *
 * @param semVer e.g. 1.3.1
 * @return e.g. 10301 (-> 1 03 01)
 */
private static int generateVersionCode(String semVer) {
   return semVer.split('\\.')
         .collect { Integer.parseInt(it) }
         .inject { sum, value -> sum * 100 + value }
}